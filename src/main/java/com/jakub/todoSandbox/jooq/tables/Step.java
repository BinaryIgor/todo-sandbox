/*
 * This file is generated by jOOQ.
 */
package com.jakub.todoSandbox.jooq.tables;


import com.jakub.todoSandbox.jooq.Keys;
import com.jakub.todoSandbox.jooq.Tododb;
import com.jakub.todoSandbox.jooq.tables.records.StepRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Step extends TableImpl<StepRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>tododb.step</code>
     */
    public static final Step STEP = new Step();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StepRecord> getRecordType() {
        return StepRecord.class;
    }

    /**
     * The column <code>tododb.step.id</code>.
     */
    public final TableField<StepRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>tododb.step.name</code>.
     */
    public final TableField<StepRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>tododb.step.description</code>.
     */
    public final TableField<StepRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>tododb.step.todo_id</code>.
     */
    public final TableField<StepRecord, Long> TODO_ID = createField(DSL.name("todo_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Step(Name alias, Table<StepRecord> aliased) {
        this(alias, aliased, null);
    }

    private Step(Name alias, Table<StepRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>tododb.step</code> table reference
     */
    public Step(String alias) {
        this(DSL.name(alias), STEP);
    }

    /**
     * Create an aliased <code>tododb.step</code> table reference
     */
    public Step(Name alias) {
        this(alias, STEP);
    }

    /**
     * Create a <code>tododb.step</code> table reference
     */
    public Step() {
        this(DSL.name("step"), null);
    }

    public <O extends Record> Step(Table<O> child, ForeignKey<O, StepRecord> key) {
        super(child, key, STEP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Tododb.TODODB;
    }

    @Override
    public Identity<StepRecord, Long> getIdentity() {
        return (Identity<StepRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<StepRecord> getPrimaryKey() {
        return Keys.STEP_PKEY;
    }

    @Override
    public List<ForeignKey<StepRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STEP__STEP_TODO_ID_FKEY);
    }

    private transient Todo _todo;

    /**
     * Get the implicit join path to the <code>tododb.todo</code> table.
     */
    public Todo todo() {
        if (_todo == null)
            _todo = new Todo(this, Keys.STEP__STEP_TODO_ID_FKEY);

        return _todo;
    }

    @Override
    public Step as(String alias) {
        return new Step(DSL.name(alias), this);
    }

    @Override
    public Step as(Name alias) {
        return new Step(alias, this);
    }

    @Override
    public Step as(Table<?> alias) {
        return new Step(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Step rename(String name) {
        return new Step(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Step rename(Name name) {
        return new Step(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Step rename(Table<?> name) {
        return new Step(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super String, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
